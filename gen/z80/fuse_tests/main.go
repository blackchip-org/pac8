// https://github.com/tom-seddon/fuse-emulator-code/tree/master/fuse/z80/tests

package main

import (
	"bufio"
	"bytes"
	"fmt"
	"html/template"
	"io/ioutil"
	"os"
	"strings"
)

//go:generate go run main.go
//go:generate go fmt ../../../cpu/z80/fuse_test.gen.go

var out bytes.Buffer

func main() {
	out.WriteString("// Code generated by gen/z80/fuse_tests. DO NOT EDIT.\n\n")
	out.WriteString("package z80\n")
	out.WriteString("import \"github.com/blackchip-org/pac8/memory\"\n")
	out.WriteString("var fuseTests = []fuseTest{\n")
	loadTests()
	out.WriteString("}\n\n")

	out.WriteString("var fuseResults = map[string]fuseTest{\n")
	loadResults()
	out.WriteString("}\n")

	err := ioutil.WriteFile("../../../cpu/z80/fuse_test.gen.go", out.Bytes(), 0644)
	if err != nil {
		fatal("unable to save file", err)
	}
}

func loadTests() {
	file, err := os.Open("tests.in")
	if err != nil {
		fatal("unable to open", err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		if line == "" {
			continue
		} else {
			name := line
			scanner.Scan()
			parseTest(name, scanner)
		}
	}
}

func loadResults() {
	file, err := os.Open("tests.expected")
	if err != nil {
		fatal("unable to open", err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		if line == "" {
			continue
		} else {
			name := line
			out.WriteString("\"" + name + "\": ")
			line = ""
			for line == "" || line[0] == ' ' {
				scanner.Scan()
				line = scanner.Text()
			}
			parseTest(name, scanner)
		}
	}
}

func parseTest(name string, scanner *bufio.Scanner) {
	t := make(map[string]string)
	t["name"] = name

	line1 := strings.Fields(scanner.Text())
	t["af"] = line1[0]
	t["bc"] = line1[1]
	t["de"] = line1[2]
	t["hl"] = line1[3]
	t["af1"] = line1[4]
	t["bc1"] = line1[5]
	t["de1"] = line1[6]
	t["hl1"] = line1[7]
	t["ix"] = line1[8]
	t["iy"] = line1[9]
	t["sp"] = line1[10]
	t["pc"] = line1[11]

	scanner.Scan()
	line2 := strings.Fields(scanner.Text())
	t["i"] = line2[0]
	t["r"] = line2[1]
	t["iff1"] = line2[2]
	t["iff2"] = line2[3]
	t["halt"] = line2[4]
	t["tstates"] = line2[6]

	t["snapshots"] = parseSnapshots(scanner)
	testTemplate.Execute(&out, t)
}

func parseSnapshots(scanner *bufio.Scanner) string {
	var tests bytes.Buffer
	for {
		scanner.Scan()
		line := strings.Fields(scanner.Text())
		if len(line) == 0 || line[0] == "-1" {
			break
		}
		address := line[0]
		values := []string{}
		for _, value := range line[1 : len(line)-1] {
			values = append(values, "0x"+value)
		}
		tests.WriteString(
			fmt.Sprintf("memory.Snapshot{Address: 0x%v, Values: []uint8{%v}},\n",
				address, strings.Join(values, ",")))
	}
	return tests.String()
}

func fatal(message string, err error) {
	fmt.Printf("error: %v: %v\n", message, err)
	os.Exit(1)
}

var testTemplate = template.Must(template.New("").Parse(`fuseTest{
	name: "{{.name}}",
	af: 0x{{.af}},
	bc: 0x{{.bc}},
	de: 0x{{.de}},
	hl: 0x{{.hl}},
	af1: 0x{{.af1}},
	bc1: 0x{{.bc1}},
	de1: 0x{{.de1}},
	hl1: 0x{{.hl1}},
	ix: 0x{{.ix}},
	iy: 0x{{.iy}},
	sp: 0x{{.sp}},
	pc: 0x{{.pc}},
	i: 0x{{.i}},
	r: 0x{{.r}},
	iff1: {{.iff1}},
	iff2: {{.iff2}},
	halt: {{.halt}},
	tstates: {{.tstates}},
	snapshots: []memory.Snapshot{
		{{.snapshots}}
	},
},
`))
